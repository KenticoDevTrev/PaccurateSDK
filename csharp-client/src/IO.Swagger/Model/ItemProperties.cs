/* 
 * paccurate.io
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.4.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// general properties of an item
    /// </summary>
    [DataContract]
    public partial class ItemProperties :  IEquatable<ItemProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemProperties" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ItemProperties() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemProperties" /> class.
        /// </summary>
        /// <param name="refId">item type reference identifier passed backed from request..</param>
        /// <param name="name">name or description of item for your reference..</param>
        /// <param name="color">designated color name for the item in pack visualizations..</param>
        /// <param name="weight">weight of this single packed item. (required).</param>
        /// <param name="sequence">A sequence value for the item. This is intended for aisle-bin locations, e.g., aisle 11 bin 20 can be &#39;1120&#39;. Combined with maxSequenceDistance, you can restrict cartons to only have contents from within a certain range. This is very helpful for cartonization when picking efficiency is paramount. Sequence can also be used to pre-sort items for efficient packing on any arbitrary number, such as item weight instead of the default item volume..</param>
        /// <param name="dimensions">the length, width, and height of the item. (required).</param>
        /// <param name="centerOfMass">the coordinates of the center of mass of the item..</param>
        /// <param name="_virtual">whether or not this is a real item or a virtual, blocking space (from a subspace or loading rules) (default to false).</param>
        public ItemProperties(int? refId = default(int?), string name = default(string), string color = default(string), decimal? weight = default(decimal?), string sequence = default(string), Object dimensions = default(Object), Object centerOfMass = default(Object), bool? _virtual = false)
        {
            // to ensure "weight" is required (not null)
            if (weight == null)
            {
                throw new InvalidDataException("weight is a required property for ItemProperties and cannot be null");
            }
            else
            {
                this.Weight = weight;
            }
            // to ensure "dimensions" is required (not null)
            if (dimensions == null)
            {
                throw new InvalidDataException("dimensions is a required property for ItemProperties and cannot be null");
            }
            else
            {
                this.Dimensions = dimensions;
            }
            this.RefId = refId;
            this.Name = name;
            this.Color = color;
            this.Sequence = sequence;
            this.CenterOfMass = centerOfMass;
            // use default value if no "_virtual" provided
            if (_virtual == null)
            {
                this.Virtual = false;
            }
            else
            {
                this.Virtual = _virtual;
            }
        }
        
        /// <summary>
        /// item type reference identifier passed backed from request.
        /// </summary>
        /// <value>item type reference identifier passed backed from request.</value>
        [DataMember(Name="refId", EmitDefaultValue=false)]
        public int? RefId { get; set; }

        /// <summary>
        /// name or description of item for your reference.
        /// </summary>
        /// <value>name or description of item for your reference.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// designated color name for the item in pack visualizations.
        /// </summary>
        /// <value>designated color name for the item in pack visualizations.</value>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public string Color { get; set; }

        /// <summary>
        /// weight of this single packed item.
        /// </summary>
        /// <value>weight of this single packed item.</value>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public decimal? Weight { get; set; }

        /// <summary>
        /// A sequence value for the item. This is intended for aisle-bin locations, e.g., aisle 11 bin 20 can be &#39;1120&#39;. Combined with maxSequenceDistance, you can restrict cartons to only have contents from within a certain range. This is very helpful for cartonization when picking efficiency is paramount. Sequence can also be used to pre-sort items for efficient packing on any arbitrary number, such as item weight instead of the default item volume.
        /// </summary>
        /// <value>A sequence value for the item. This is intended for aisle-bin locations, e.g., aisle 11 bin 20 can be &#39;1120&#39;. Combined with maxSequenceDistance, you can restrict cartons to only have contents from within a certain range. This is very helpful for cartonization when picking efficiency is paramount. Sequence can also be used to pre-sort items for efficient packing on any arbitrary number, such as item weight instead of the default item volume.</value>
        [DataMember(Name="sequence", EmitDefaultValue=false)]
        public string Sequence { get; set; }

        /// <summary>
        /// the length, width, and height of the item.
        /// </summary>
        /// <value>the length, width, and height of the item.</value>
        [DataMember(Name="dimensions", EmitDefaultValue=false)]
        public Object Dimensions { get; set; }

        /// <summary>
        /// the coordinates of the center of mass of the item.
        /// </summary>
        /// <value>the coordinates of the center of mass of the item.</value>
        [DataMember(Name="centerOfMass", EmitDefaultValue=false)]
        public Object CenterOfMass { get; set; }

        /// <summary>
        /// whether or not this is a real item or a virtual, blocking space (from a subspace or loading rules)
        /// </summary>
        /// <value>whether or not this is a real item or a virtual, blocking space (from a subspace or loading rules)</value>
        [DataMember(Name="virtual", EmitDefaultValue=false)]
        public bool? Virtual { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemProperties {\n");
            sb.Append("  RefId: ").Append(RefId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  CenterOfMass: ").Append(CenterOfMass).Append("\n");
            sb.Append("  Virtual: ").Append(Virtual).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemProperties);
        }

        /// <summary>
        /// Returns true if ItemProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RefId == input.RefId ||
                    (this.RefId != null &&
                    this.RefId.Equals(input.RefId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.Sequence == input.Sequence ||
                    (this.Sequence != null &&
                    this.Sequence.Equals(input.Sequence))
                ) && 
                (
                    this.Dimensions == input.Dimensions ||
                    (this.Dimensions != null &&
                    this.Dimensions.Equals(input.Dimensions))
                ) && 
                (
                    this.CenterOfMass == input.CenterOfMass ||
                    (this.CenterOfMass != null &&
                    this.CenterOfMass.Equals(input.CenterOfMass))
                ) && 
                (
                    this.Virtual == input.Virtual ||
                    (this.Virtual != null &&
                    this.Virtual.Equals(input.Virtual))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RefId != null)
                    hashCode = hashCode * 59 + this.RefId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.Sequence != null)
                    hashCode = hashCode * 59 + this.Sequence.GetHashCode();
                if (this.Dimensions != null)
                    hashCode = hashCode * 59 + this.Dimensions.GetHashCode();
                if (this.CenterOfMass != null)
                    hashCode = hashCode * 59 + this.CenterOfMass.GetHashCode();
                if (this.Virtual != null)
                    hashCode = hashCode * 59 + this.Virtual.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
